'''
PROBLEM STATUS: COMPLETE

PROBLEM DIFFICULTY LEVEL: 25%

PROBLEM STATEMENT
https://projecteuler.net/problem=145

To solve this, we will create 2 functions namely;
        (1) To reverse a given number
        (2) To check which of the numbers in (1) satisfy the stipulated condition

'''
import numpy as np
import math
#Lets start with all reversible numbers under 20

#Creating a function that has created a list of all numbers (2 digits or greater) below our max_range, and then removes all values with trailing zeroes
def valid_integers(max_range):
    start_value=11
    #Creates a list of all numbers under our max_range
    total_number_list = np.arange(start_value,max_range+1)
    #Removing all the values with leading zeroes
    number_list = [number for number in total_number_list if number%10 != 0]
    print(total_number_list)
    print(number_list)
    '''for digit in total_number_list:
        #Mathematically calculating the number of digits of a number. This will help us know how many times we divide by 10 to conclusively check for leading zeroes
        digit_size_val = math.floor(math.log10(digit)) + 1
        #Current number has to be checked for leading zeroes 
        for divisor in range(1,digit_size_val+1):
            if((digit%10**divisor)==0):
                leading_zero_check = True
                break
            else:
                leading_zero_check = False
        if(leading_zero_check == True):
            #Removing that value from the list. We can use .remove() as we know that each value only occurs once
            digit_list.remove(digit)
    print(digit_list)'''

valid_integers(42)